local lsp_zero = require('lsp-zero')

lsp_zero.on_attach(function(client, bufnr)
  local opts = {buffer = bufnr, remap = false}

  vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
  vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
  vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
  vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
  vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
  vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
  vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
  vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
  vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
  vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
end)

require('mason').setup({})
require('mason-lspconfig').setup({
  ensure_installed = {
    'pyright',
    -- 'rust_analyzer'
},
  handlers = {
    lsp_zero.default_setup,
    lua_ls = function()
      local lua_opts = lsp_zero.nvim_lua_ls()
      require('lspconfig').lua_ls.setup(lua_opts)
    end,
  }
})

local cmp = require('cmp')
local cmp_select = {behavior = cmp.SelectBehavior.Select}

cmp.setup({
  sources = {
    {name = 'path'},
    {name = 'nvim_lsp'},
    {name = 'nvim_lua'},
  },
  formatting = lsp_zero.cmp_format(),
  mapping = cmp.mapping.preset.insert({
    ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
    ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
    ['<C-y>'] = cmp.mapping.confirm({ select = true }),
    ['<C-Space>'] = cmp.mapping.complete(),
  }),
})



-- local lsp = require("lsp-zero")

-- lsp.preset("recommended")

-- require('mason').setup({})
-- require('mason-lspconfig').setup({
--   ensure_installed = {
--     'pyright',
--   },
--   handlers = {
--     lsp_zero.default_setup,
--   },
-- })

-- -- Fix Undefined global 'vim'
-- lsp.nvim_workspace()


-- local cmp = require('cmp')
-- local cmp_select = {behavior = cmp.SelectBehavior.Select}
-- local cmp_mappings = lsp.defaults.cmp_mappings({
--   ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
--   ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
--   ['<C-y>'] = cmp.mapping.confirm({ select = true }),
--   ["<C-Space>"] = cmp.mapping.complete(),
-- })

-- cmp_mappings['<Tab>'] = nil
-- cmp_mappings['<S-Tab>'] = nil

-- lsp.setup_nvim_cmp({
--   mapping = cmp_mappings
-- })

-- lsp.set_preferences({
--     suggest_lsp_servers = false,
--     sign_icons = {
--         error = 'E',
--         warn = 'W',
--         hint = 'H',
--         info = 'I'
--     }
-- })

-- lsp.on_attach(function(client, bufnr)
--   local opts = {buffer = bufnr, remap = false}

--   vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
--   vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
--   vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--   vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
--   vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
--   vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
--   vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
--   vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
--   vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
--   vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
-- end)

-- lsp.setup()

-- vim.diagnostic.config({
--     virtual_text = true
-- })











-- local on_attach = function(_, bufnr)

--   local bufmap = function(keys, func)
--     vim.keymap.set('n', keys, func, { buffer = bufnr })
--   end

--   bufmap('<leader>r', vim.lsp.buf.rename)
--   bufmap('<leader>a', vim.lsp.buf.code_action)

--   bufmap('gd', vim.lsp.buf.definition)
--   bufmap('gD', vim.lsp.buf.declaration)
--   bufmap('gI', vim.lsp.buf.implementation)
--   bufmap('<leader>D', vim.lsp.buf.type_definition)

--   bufmap('gr', require('telescope.builtin').lsp_references)
--   bufmap('<leader>s', require('telescope.builtin').lsp_document_symbols)
--   bufmap('<leader>S', require('telescope.builtin').lsp_dynamic_workspace_symbols)

--   bufmap('K', vim.lsp.buf.hover)

--   vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
--     vim.lsp.buf.format()
--   end, {})
-- end

-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- -- no mason
-- -- require('lspconfig').lua_ls.setup {
-- --     on_attach = on_attach,
-- --     capabilities = capabilities,
-- --     Lua = {
-- --       workspace = { checkThirdParty = false },
-- --       telemetry = { enable = false },
-- --     },
-- -- }

-- -- mason
-- require("mason").setup()
-- require("mason-lspconfig").setup_handlers({

--     function(server_name)
--         require("lspconfig")[server_name].setup {
--             on_attach = on_attach,
--             capabilities = capabilities
--         }
--     end,

--     ["lua_ls"] = function()
--         require('neodev').setup()
--         require('lspconfig').lua_ls.setup {
--             on_attach = on_attach,
--             capabilities = capabilities,
--             settings = {
--                 Lua = {
--                     workspace = { checkThirdParty = false },
--                     telemetry = { enable = false },
--                 },
--             }
--         }
--     end,
-- 	["pyright"] = function()
-- 		require("lspconfig").pyright.setup {
-- 			on_attach = on_attach,
-- 			capabilities = capabilities,
-- 		}
-- 	end,

--     -- another example
--     -- ["omnisharp"] = function()
--     --     require('lspconfig').omnisharp.setup {
--     --         filetypes = { "cs", "vb" },
--     --         root_dir = require('lspconfig').util.root_pattern("*.csproj", "*.sln"),
--     --         on_attach = on_attach,
--     --         capabilities = capabilities,
--     --         enable_roslyn_analyzers = true,
--     --         analyze_open_documents_only = true,
--     --         enable_import_completion = true,
--     --     }
--     -- end,
-- })
